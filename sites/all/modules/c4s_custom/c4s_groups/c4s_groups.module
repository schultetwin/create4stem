<?php

/**
 * Implements hook_menu().
 */
function c4s_groups_menu() {
  // Don't use hook_load here for the access callback
  $items['node/%/group_admin'] = array(
    'title' => 'Group Admin',
    'page callback' => 'c4s_groups_admin_page',
    'page arguments' => array(1),
    'access callback' => 'og_user_access_by_entity',
    'access arguments' => array('group_admin_page', 'node', 1),
    'file' => 'c4s_groups.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['group/%/%/unsubscribe/%'] = array(
    'page callback' => 'c4s_group_unsubscribe_user',
    'page arguments' => array(1,2,4),
    'access callback' => 'og_user_access_entity',
    'access arguments' => array('administer group', 1, 2),
    'file' => 'c4s_groups.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_og_permission().
 */
function c4s_groups_og_permission() {
  return array(
    'group_admin_page' => array(
      'title' => t('Use group admin page'),
      'description' => t("Allow user to use group admin page."),
      'roles' => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function c4s_groups_views_api() {
  return array(
    'version' => '3',
    'path' => drupal_get_path('module', 'c4s_groups') . '/includes/views',
  );
}

/**
 * Implements hook_block_info().
 */
function c4s_groups_block_info() {
  $blocks['create_group_content'] = array(
    'info' => t('Form to create content for a group'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4s_groups_block_view($delta = '') {
  switch ($delta) {
    case 'create_group_content':
      global $user;
      $group = og_context_determine_context();
      if ($group == FALSE) return;
      if (!og_is_member($group->gid, 'user', $user) && !user_access('administer groups')) return;
      $block['content'] = drupal_get_form('c4s_groups_add_content_form', $group);
      $block['subject'] = t('Add Content to Group');
      break;
  }
  return $block;
}

function c4s_groups_add_content_form($form, &$form_state, $group) {
  $options3 = node_type_get_types();
  foreach ($options3 as $key => $option) {
    if (og_is_group_content_type('node', $key)) {
      $options[$key] = $option->name;
    }
  }
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
    $node = node_load($nid);
  }
  $form['#attached'] = array(
    'css' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'c4s_groups') . '/c4s_groups.css',
    ),
  );
  $form['content_type'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($node) ? $node->type : ''
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'create',
  );
  return $form;
}

function c4s_groups_add_content_form_submit($form, &$form_state) {
  $type = $form_state['values']['content_type'];
  $group = array_pop($form_state['build_info']['args']);
  $form_state['redirect'] = array(
    'node/add/' . $type, array(
      'query' => array(
        'gids_group' => array($group->gid),
      ),
    ),
  );
}

/**
 * Ajax/Form submit callback for view
 */
function c4s_group_og_membership_state_ajax($form, $form_state) {
  $trigger = $form_state['triggering_element']['#array_parents'];
  $state = drupal_array_get_nested_value($form_state['values'], $trigger);
  array_pop($trigger);
  array_push($trigger, 'id');
  $membership_id = drupal_array_get_nested_value($form_state['values'], $trigger);
  $membership = og_membership_load($membership_id);
  $membership->state = $state;
  $membership->save();
}

/**
 * AJAX callback to change content access
 */
function c4s_group_ajax_content_access($form, &$form_state) {
  $array_parents = $form_state['triggering_element']['#array_parents'];
  array_pop($array_parents);
  $values = drupal_array_get_nested_value($form_state['values'], $array_parents);
  $entity = entity_load($values['entity_type'], array($values['etid']));
  $entity_wrapper = entity_metadata_wrapper($values['entity_type'], array_pop($entity));
  $entity_wrapper->{OG_CONTENT_ACCESS_FIELD}->set($values['content']);
  $entity_wrapper->save();
}

/**
 * Form that will add a user to a group
 */
function c4s_groups_add_user_group($form, &$form_state, $group) {
  $form['#group'] = $group;
  $form['og_user'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add User'),
    '#collapsible' => TRUE,
    '#collapsed' =>TRUE,
  );
  $form['og_user']['og_add_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User name'),
    '#autocomplete_path' => 'user/autocomplete',
    '#required' => TRUE,
  );
  $form['og_user']['og_add_user_state'] = array(
    '#type' => 'select',
    '#title' => t('Membership state'),
    '#options' => og_group_content_states(),
    '#description' => t('Select the state of the membership.'),
  );
  $form['og_user']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add User to Group'),
  );

  return $form;
}

/**
 * c4s_groups add a user to a group
 */
function c4s_groups_add_user_group_submit($form, &$form_state) {
  $account = user_load_by_name($form_state['values']['og_add_user']);
  $state = $form_state['values']['og_add_user_state'];
  $membership = og_get_group_membership($form['#group']->gid, 'user', $account->uid);
  if ($membership) {
    drupal_set_message(t('User %user is already a member of group %group', array(
      '%user' => $account->name,
      '%group' => og_label($form['#group']->gid),
    )), 'warning');
  }
  else  {
    $membership = og_membership_create($form['#group']->gid, 'user', $account->uid);
    $membership->state = $state;
    $membership->save();
  }
}